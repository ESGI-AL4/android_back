generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  pseudo        String?
  firstName     String?
  lastName      String?
  password      String
  role          String         @default("user")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  registrations Registration[]
  meetings      Meeting[]      @relation("UserMeetings")
  wallet        Wallet?        // Relation optionnelle (un seul wallet par utilisateur)
}

model Meeting {
  id            Int            @id @default(autoincrement())
  title         String
  description   String?
  date          DateTime
  location      String?
  capacity      Int?
  creatorId     Int
  creator       User           @relation(fields: [creatorId], references: [id], name: "UserMeetings")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  registrations Registration[]
  image         String?
}

model Registration {
  id        Int      @id @default(autoincrement())
  userId    Int
  meetingId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  meeting   Meeting  @relation(fields: [meetingId], references: [id])

  @@unique([userId, meetingId])
}

enum NewsCategory {
  PRESSE
  TECHNOLOGIE
  ECONOMIE
}

model News {
  id          Int       @id @default(autoincrement())
  title       String
  body        String
  image       String?
  author      String
  publishedAt DateTime  @default(now())
  category    NewsCategory
  link        String    @unique
}

// --- Portefeuille et positions ---

model Wallet {
  id          Int             @id @default(autoincrement())
  userId      Int             @unique
  totalValue  Float           // Valeur totale actuelle du portefeuille
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  positions   WalletPosition[]
  user        User            @relation(fields: [userId], references: [id])
}

model WalletPosition {
  id            Int      @id @default(autoincrement())
  walletId      Int
  cryptoSymbol  String   // Par exemple "BTC", "ETH"
  quantity      Float    // Quantité détenue
  purchasePrice Float    // Prix d'achat unitaire
  wallet        Wallet   @relation(fields: [walletId], references: [id])
}

// --- Cryptos et historique des prix ---

model CurrentCryptoPrice {
  id        Int      @id @default(autoincrement())
  crypto    String   @unique  // Symbole, ex: "BTC"
  fullName  String   // Nom complet, ex: "Bitcoin"
  coinId    String   // Identifiant CoinGecko, ex: "bitcoin"
  price     Float    // Prix actuel
  updatedAt DateTime @default(now()) @updatedAt
}

model CryptoPriceHistory {
  id        Int      @id @default(autoincrement())
  crypto    String   // Symbole, ex: "BTC"
  fullName  String?  // Nom complet (optionnel)
  coinId    String?  // Identifiant CoinGecko (optionnel)
  price     Float    // Prix relevé
  fetchedAt DateTime @default(now())
}
